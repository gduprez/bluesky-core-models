declare namespace bluesky.core.models.technicalData {
    /** Dto header of a technical access **/
    interface TechnicalAccessHeaderDto extends OrderManagementEntityDto {
        /** Value of the technical access type enumeration. */
        technicalAccessType: string;
        /** Gets or sets Name of the AccessAccount, generated by TI. */
        accessName: string;
        /** Gets or sets Conference reference */
        conferenceRef: string;
        /** Gets or sets Domain name */
        domainName: string;
        /** Gets or sets a flag indicates if is one time event */
        isOneTime: boolean;
        /** Gets or sets Technical product name */
        technicalProductName: string;
        /** Gets or sets Technical product specification name */
        technicalProductSpecName: string;
        /** Gets or sets Technical access start date */
        startDate: Date;
        /** Gets or sets Technical access end date */
        endDate: Date;
        /** Gets or sets User reference. */
        userRef: string;
        /** Gets or sets Billing code. */
        billingCode: string;
        /** Gets or sets a flag indicates if defined by Technical Inventory and used by Provisioning to determine if the User must be createdor if he already exists on the platform. */
        isUserImpacted: boolean;
        /** Gets or sets Subsidiary code */
        subsidiaryCode: string;
        /** Gets or sets Duration of the conference. */
        duration: number;
        /** Gets or sets topic of the conference. */
        topic: string;
        /** Gets or sets the flag indicating whether provisioning is required. */
        isProvisioningRequired: boolean;
        /** Gets or sets the integration link. */
        integrationLink: string;
        /** Getss whether this access can be used to create OTP accesses.It is true if the access is permanent and the product supports OTP. */
        canCreateOTP: boolean;
        /** Gets or sets the commercial name of the access' technical product specification. */
        commercialProductName: string;
        /** Gets or sets Subdomain identifier. Used in mapping referential constraint. */
        subdomainId: number;
        /** Gets or sets User identifier. Used in mapping referential constraint. */
        userId: number;
        /** Gets or sets Subsidiary of the user */
        userSubsidiary: string;
        /** Gets or sets DomainSpecName of the user */
        domainSpecName: string;
        /** Value of the conference type. */
        conferenceType: string;
        /** Indicates if the access will be hidden for One Portal users. */
        isHidden: boolean;
        /** Gets or sets the access status. */
        status: string;
    }
}
